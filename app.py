# -*- coding: utf-8 -*-
"""Untitled63.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tLiqErkfqmi-A9XDmGehKG9EMb7f82xu
"""

import streamlit as st
from streamlit_webrtc import webrtc_streamer
from gtts import gTTS
import time
import speech_recognition as sr

# Include Recorder.js using the HTML component
st.markdown(
    """
    <script src="https://cdnjs.cloudflare.com/ajax/libs/recorderjs/0.1.0/recorder.js"></script>
    """,
    unsafe_allow_html=True
)

# Initialize SpeechRecognition recognizer
recognizer = sr.Recognizer()

# Define chatbot logic for different roles
def project_manager_interview():
    questions = [
        "Can you introduce yourself?",
        "Can you describe a challenging project you've managed?",
        "How do you handle team conflicts?",
        "How do you prioritize tasks in a project?",
        "How do you ensure that a project stays on schedule and within budget?",
    ]
    return questions

def developer_interview():
    questions = [
        "Can you introduce yourself?",
        "What programming languages are you proficient in?",
        "Tell me about a complex coding problem you've solved",
        "How do you stay updated with the latest industry trends?",
        "How do you approach debugging and troubleshooting in your code?",
    ]
    return questions

def hr_manager_interview():
    questions = [
        "Can you introduce yourself?",
        "How do you handle employee conflicts?",
        "What HR tools or software are you familiar with?",
        "Can you explain the onboarding process you've implemented?",
        "What strategies do you use to improve employee engagement and retention?",
    ]
    return questions

# Main Streamlit app
st.title("Voice Interview Chatbot")

# Conversation flow for different roles
if st.button("Start Interview"):
    # Use gTTS to convert the welcome message to audio
    welcome_message = "Hello. What type of role are you interested in? Project Manager, Developer, or HR Manager?"
    tts = gTTS(text=welcome_message, lang='en')
    tts.save("welcome_message.mp3")

    # Play the audio file for the welcome message with a 10-second delay
    audio_file = open("welcome_message.mp3", "rb")
    audio_bytes = audio_file.read()
    st.audio(audio_bytes, format='audio/mp3')

    # Add a delay of 10 seconds before prompting the user to respond
    time.sleep(10)

    with sr.Microphone() as source:
        st.write("User: (Speak your response)")
        audio = recognizer.listen(source)

    user_response = recognizer.recognize_google(audio)
    st.write(f"User: {user_response}")

    if "project manager" in user_response.lower():
        questions = project_manager_interview()
    elif "developer" in user_response.lower():
        questions = developer_interview()
    elif "hr manager" in user_response.lower():
        questions = hr_manager_interview()
    else:
        st.write("Bot: I'm sorry, I didn't understand your choice.")
        st.stop()

    for question in questions:
        while True:
            # Use gTTS to convert text to speech and save the question as an audio file
            tts = gTTS(text=question, lang='en')
            tts.save("question.mp3")

            # Play the audio file using st.audio() after a delay
            audio_file = open("question.mp3", "rb")
            audio_bytes = audio_file.read()
            st.audio(audio_bytes, format='audio/mp3')

            # Add a delay of 6 seconds before prompting the user to respond
            time.sleep(6)

            with sr.Microphone() as source:
                st.write("User: (Speak your response)")
                audio = recognizer.listen(source)

            user_response = recognizer.recognize_google(audio)

            if user_response:
                st.write(f"User: {user_response}")
                break  # Exit the loop if a response is detected
            else:
                st.write("Bot: I didn't hear a response. Please answer the question.")

    # Convert the final statement to audio
    final_statement = "Your interview is complete. Thank you for answering the questions."
    tts = gTTS(text=final_statement, lang='en')
    tts.save("final_statement.mp3")

    # Play the audio file for the final statement
    audio_file = open("final_statement.mp3", "rb")
    audio_bytes = audio_file.read()
    st.audio(audio_bytes, format='audio/mp3')

# Display audio recording controls using Recorder.js
javascript_code = """
<script>
var audioContext = new (window.AudioContext || window.webkitAudioContext)();
var audioInput = null, realAudioInput = null, inputPoint = null, audioRecorder = null;
function startRecording() {
  if (!audioRecorder)
    return;
  audioRecorder.clear();
  audioRecorder.record();
}
function stopRecording() {
  if (!audioRecorder)
    return;
  audioRecorder.stop();
  audioRecorder.exportWAV(doneEncoding);
}
function doneEncoding(blob) {
  var url = URL.createObjectURL(blob);
  var audio = new Audio(url);
  audio.play();
}
window.onload = function () {
  audioInput = document.getElementById("audioin");
  realAudioInput = audioContext.createMediaStreamSource(audioInput);
  inputPoint = audioContext.createGain();
  realAudioInput.connect(inputPoint);
  audioRecorder = new Recorder(inputPoint);
}
</script>
"""

# Display JavaScript code for audio recording controls
st.write(javascript_code)

if st.button("Exit Interview"):
    st.write("Bot: Goodbye!")

